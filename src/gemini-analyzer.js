const { GoogleGenerativeAI } = require('@google/generative-ai');
const { Client } = require('pg');

async function geminiAnalyze() {
  console.log('[GeminiÂàÜÊûê] ÈñãÂßã...');
  
  const client = new Client({
    connectionString: process.env.DATABASE_URL
  });
  
  try {
    await client.connect();
    console.log('[DB] Êé•Á∂öÊàêÂäü');
    
    // ÊúüÈñì„ÇíÁí∞Â¢ÉÂ§âÊï∞„ÅßË™øÊï¥ÂèØËÉΩ„Å´Ôºà„Éá„Éï„Ç©„É´„Éà7Êó•ÈñìÔºâ
    const days = process.env.ANALYSIS_DAYS || 7;
    
    const { rows } = await client.query(`
      SELECT 
        category,
        status,
        price,
        title,
        EXTRACT(EPOCH FROM (sold_at - created_at))/3600 as hours_to_sell,
        TO_CHAR(created_at, 'YYYY-MM-DD HH24:MI') as created_at
      FROM products
      WHERE created_at > NOW() - INTERVAL '${days} days'
      ORDER BY created_at DESC
    `);
    
    await client.end();
    console.log(`[DB] ${rows.length}‰ª∂„ÅÆ„Éá„Éº„ÇøÂèñÂæóÔºàÈÅéÂéª${days}Êó•ÈñìÔºâ`);
    
    if (rows.length === 0) {
      console.log('[Ë≠¶Âëä] „Éá„Éº„Çø„Åå0‰ª∂„Åß„Åô„ÄÇ');
      return;
    }
    
    // „Çµ„É≥„Éó„É´‰ª∂Êï∞„ÇíÁí∞Â¢ÉÂ§âÊï∞„ÅßË™øÊï¥ÂèØËÉΩ„Å´Ôºà„Éá„Éï„Ç©„É´„Éà1000‰ª∂„ÄÅ0=ÂÖ®‰ª∂Ôºâ
    const sampleSize = parseInt(process.env.GEMINI_SAMPLE_SIZE || '1000');
    const sampleData = sampleSize === 0 ? rows : rows.slice(0, sampleSize);
    
    console.log(`[„Çµ„É≥„Éó„É´] ${sampleData.length}‰ª∂„ÇíÂàÜÊûê„Å´‰ΩøÁî®`);
    
    // „Éá„Éº„Çø„Çµ„Ç§„Ç∫„ÇíË®àÁÆóÔºàË≠¶ÂëäÁî®Ôºâ
    const dataSize = JSON.stringify(sampleData).length;
    const estimatedTokens = Math.round(dataSize / 4); // Â§ßÈõëÊää„Å™Ë¶ãÁ©ç„ÇÇ„Çä
    console.log(`[Êé®ÂÆö] „Éá„Éº„Çø„Çµ„Ç§„Ç∫: ${(dataSize / 1024).toFixed(1)}KB, „Éà„Éº„ÇØ„É≥Êï∞: Á¥Ñ${estimatedTokens.toLocaleString()}`);
    
    if (estimatedTokens > 900000) {
      console.warn('[Ë≠¶Âëä] „Éà„Éº„ÇØ„É≥Êï∞„ÅåÂ§ö„Åô„Åé„Åæ„ÅôÔºà100‰∏á„Éà„Éº„ÇØ„É≥Âà∂ÈôêÔºâ„ÄÇGEMINI_SAMPLE_SIZE„ÇíÂ∞è„Åï„Åè„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
      return;
    }
    
    const summary = {
      total_items: rows.length,
      sold_items: rows.filter(r => r.status === 'SOLD').length,
      on_sale_items: rows.filter(r => r.status === 'Ë≤©Â£≤‰∏≠').length,
      categories: [...new Set(rows.map(r => r.category))].slice(0, 50), // „Ç´„ÉÜ„Ç¥„É™„ÇÇÂ¢ó„ÇÑ„Åô
      sample_data: sampleData,
      sample_size: sampleData.length
    };
    
    console.log('[Áµ±Ë®à] ÂêàË®à:', summary.total_items, '‰ª∂');
    console.log('[Áµ±Ë®à] SOLD:', summary.sold_items, '‰ª∂');
    console.log('[Áµ±Ë®à] Ë≤©Â£≤‰∏≠:', summary.on_sale_items, '‰ª∂');
    console.log('[Áµ±Ë®à] „Ç´„ÉÜ„Ç¥„É™Êï∞:', summary.categories.length, 'Á®ÆÈ°û');
    
    if (!process.env.GEMINI_PROMPT) {
      console.error('[„Ç®„É©„Éº] GEMINI_PROMPT„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì');
      console.log('\n‰ª•‰∏ã„ÅÆÂ§âÊï∞„ÅåÂà©Áî®ÂèØËÉΩ„Åß„ÅôÔºö');
      console.log('  {{total_items}} - ÂêàË®à‰ª∂Êï∞');
      console.log('  {{sold_items}} - Â£≤„Çå„Åü‰ª∂Êï∞');
      console.log('  {{on_sale_items}} - Ë≤©Â£≤‰∏≠‰ª∂Êï∞');
      console.log('  {{categories_count}} - „Ç´„ÉÜ„Ç¥„É™Êï∞');
      console.log('  {{categories}} - „Ç´„ÉÜ„Ç¥„É™‰∏ÄË¶ß');
      console.log('  {{sample_data}} - „Çµ„É≥„Éó„É´„Éá„Éº„ÇøÔºàJSONÔºâ');
      console.log('  {{sample_size}} - „Çµ„É≥„Éó„É´„Éá„Éº„Çø‰ª∂Êï∞');
      return;
    }
    
    if (!process.env.GEMINI_API_KEY) {
      console.error('[„Ç®„É©„Éº] GEMINI_API_KEY„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì');
      return;
    }
    
    // „Éó„É≠„É≥„Éó„ÉàÂ§âÊï∞„ÇíÁΩÆÊèõ
    const prompt = process.env.GEMINI_PROMPT
      .replace(/{{total_items}}/g, summary.total_items)
      .replace(/{{sold_items}}/g, summary.sold_items)
      .replace(/{{on_sale_items}}/g, summary.on_sale_items)
      .replace(/{{categories_count}}/g, summary.categories.length)
      .replace(/{{categories}}/g, summary.categories.join(', '))
      .replace(/{{sample_data}}/g, JSON.stringify(summary.sample_data, null, 2))
      .replace(/{{sample_size}}/g, summary.sample_size);
    
    const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

// Âà©Áî®ÂèØËÉΩ„Å™„É¢„Éá„É´‰∏ÄË¶ß„ÇíÂèñÂæó
try {
  const models = await genAI.listModels();
  console.log('[Âà©Áî®ÂèØËÉΩ„Å™„É¢„Éá„É´]');
  models.forEach(m => console.log(`  - ${m.name}`));
} catch (e) {
  console.log('[„É¢„Éá„É´‰∏ÄË¶ßÂèñÂæó„Ç®„É©„Éº]', e.message);
}
    
const model = genAI.getGenerativeModel({ 
  model: 'gemini-1.5-flash-latest',  // ‚Üê -latest „ÇíËøΩÂä†
  generationConfig: {
    temperature: 0.7,
    maxOutputTokens: 4096,
  }
});
    
    console.log('[Gemini] ÂàÜÊûê„É™„ÇØ„Ç®„Çπ„ÉàÈÄÅ‰ø°‰∏≠...');
    const startTime = Date.now();
    
    const result = await model.generateContent(prompt);
    const response = result.response;
    const text = response.text();
    
    const elapsed = ((Date.now() - startTime) / 1000).toFixed(1);
    console.log(`[Gemini] ÂàÜÊûêÂÆå‰∫ÜÔºà${elapsed}ÁßíÔºâ`);
    
    console.log('\n' + '='.repeat(80));
    console.log('üìä GeminiÂàÜÊûê„É¨„Éù„Éº„Éà');
    console.log('='.repeat(80) + '\n');
    console.log(text);
    console.log('\n' + '='.repeat(80));
    
    const fs = require('fs');
    const date = new Date().toISOString().split('T')[0];
    const filename = `analysis-${date}.md`;
    fs.writeFileSync(filename, `# „É°„É´„Ç´„É™ÂàÜÊûê„É¨„Éù„Éº„Éà - ${date}\n\n${text}`);
    console.log(`\n[‰øùÂ≠ò] „É¨„Éù„Éº„Éà„Çí ${filename} „Å´‰øùÂ≠ò„Åó„Åæ„Åó„Åü`);
    
  } catch (error) {
    console.error('[„Ç®„É©„Éº]', error.message);
    if (error.response) {
      console.error('[Ë©≥Á¥∞]', error.response.data);
    }
  }
}

geminiAnalyze().then(() => {
  console.log('\n‚úÖ ÂàÜÊûêÂÆå‰∫Ü!');
  process.exit(0);
}).catch(error => {
  console.error('‚ùå „Ç®„É©„Éº:', error);
  process.exit(1);
});
